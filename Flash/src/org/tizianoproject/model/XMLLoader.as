import mx.utils.Delegate;import org.casalib.event.EventDispatcher;import org.casalib.util.ArrayUtil;import org.casalib.util.XmlUtil;import org.tizianoproject.model.vo.Question;import org.casalib.util.StringUtil;import org.casalib.util.ValidationUtil;class org.tizianoproject.model.XMLLoader extends EventDispatcher{	static var MAX_QUESTIONS:Number = 10;		private var xml:XML;	private var _quiz:Array;		private var returnXML:Function;		function XMLLoader(targetXML:String)	{					xml = new XML();		xml.ignoreWhite = true;		xml.onLoad = Delegate.create(this, onLoadEvent);		xml.load(targetXML);			}		//Now that onLoadEvent is fired, parseXML will be called	private function onLoadEvent(success:Boolean){		if(success){			parseXML();		}else{			trace("XML Could Not Load");		}	}		//Set a function to respond to onLoadEvent	public function set callXML(callBack:Function):Void	{		returnXML = callBack;	}		private function parseXML():Void	{		_quiz = new Array();				var letters:Array = new Array("A. ", "B. ", "C. ", "D. ");				//options == <option>		var options:Array = new Array();				//Set a allXML scope		var allXML:Object = xml.firstChild;		var numOfNodes = allXML.childNodes.length;		for (var i:Number = 0; i<numOfNodes; i++) {			//Set a scope for each question			var round:XML = allXML.childNodes[i];			//Collect the Questions + Images			var question:String = XmlUtil.getTextOfChildNodeByName( round, "question" );						//Collect the Answer Options + Correct Answer			options[i] = new Array();			var numOfOptions:Number = 4;			for (var j:Number = 0; j<numOfOptions; j++) {				var option:String = XmlUtil.getTextOfChildNodeByName( round, "option" + (j+1).toString() );				//Make sure the data isn't blank				if( ValidationUtil.isEmpty( option ) ){				} else {					options[i].push( letters[j] + StringUtil.removeExtraSpaces(option) );				}			}//end jLoop			//trace( options[i] );			var key:String = XmlUtil.getTextOfChildNodeByName( round, "key" );			var info:String = XmlUtil.getTextOfChildNodeByName( round, "info" );						var quizQuestion:Question = new Question( question, info, key, options[i] );						//Create a  Quiz			_quiz.push( quizQuestion );		}		//Quiz is now complete and randomized		this.dispatchEvent( "complete", getRandomQuiz() );	}		/**************************	 * Getters	 **************************/	public function getRandomQuiz():Array	{		//Randomize the Quiz, only deliver 10 questions		return ArrayUtil.randomize( quiz ).slice( 0, 10 );	}		public function get quiz():Array	{		return _quiz;	}}